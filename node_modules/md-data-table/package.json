{
  "_args": [
    [
      {
        "raw": "md-data-table",
        "scope": null,
        "escapedName": "md-data-table",
        "name": "md-data-table",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\MAC-PROJECT\\tontineApp"
    ]
  ],
  "_from": "md-data-table@latest",
  "_id": "md-data-table@2.2.0",
  "_inCache": true,
  "_location": "/md-data-table",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/md-data-table-2.2.0.tgz_1479904789077_0.6638288055546582"
  },
  "_npmUser": {
    "name": "iamisti",
    "email": "programtervezo@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "md-data-table",
    "scope": null,
    "escapedName": "md-data-table",
    "name": "md-data-table",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/md-data-table/-/md-data-table-2.2.0.tgz",
  "_shasum": "f425529e10094bdb94bfa56a331a9b94a2e512f1",
  "_shrinkwrap": null,
  "_spec": "md-data-table",
  "_where": "C:\\MAC-PROJECT\\tontineApp",
  "author": {
    "name": "Istvan Fodor",
    "email": "programtervezo@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/iamisti/mdDataTable/issues"
  },
  "dependencies": {
    "angular": "~1.5.8",
    "angular-animate": "~1.5.8",
    "angular-aria": "~1.5.8",
    "angular-material": "1.1.1",
    "angular-material-icons": "~v0.6.0",
    "angular-sanitize": "~1.5.8",
    "jquery": "~2.1.4",
    "lodash": "~3.10.1"
  },
  "description": "> Live demo http://iamisti.github.io/mdDataTable/",
  "devDependencies": {
    "codeclimate-test-reporter": "~0.1.1",
    "event-stream": "~3.3.4",
    "fstream": "^1.0.10",
    "glob": "~6.0.2",
    "gulp": "~3.9.0",
    "gulp-angular-filesort": "~1.1.1",
    "gulp-angular-templatecache": "~1.8.0",
    "gulp-cached": "~1.1.0",
    "gulp-compass": "~2.1.0",
    "gulp-concat": "~2.6.0",
    "gulp-connect": "~2.3.1",
    "gulp-inject": "~3.0.0",
    "gulp-jshint": "~2.0.0",
    "gulp-karma": "~0.0.5",
    "gulp-ng-annotate": "~1.1.0",
    "gulp-ngdocs": "^0.2.13",
    "gulp-plumber": "~1.0.1",
    "gulp-rename": "~1.2.2",
    "gulp-rimraf": "~0.2.0",
    "gulp-uglify": "~1.5.1",
    "gulp-watch": "~4.3.5",
    "jasmine-core": "^2.4.1",
    "jasmine-reporters": "~2.1.0",
    "jshint": "^2.9.3",
    "karma": "~0.13.15",
    "karma-coverage": "~0.5.3",
    "karma-jasmine": "~0.3.6",
    "karma-jasmine-jquery": "~0.1.1",
    "karma-ng-html2js-preprocessor": "~0.2.0",
    "karma-ng-scenario": "~0.1.0",
    "karma-phantomjs-launcher": "~0.2.1",
    "karma-traceur-preprocessor": "~0.4.0",
    "lodash": "~3.10.1",
    "main-bower-files": "~2.11.0",
    "phantomjs": "^2.1.7",
    "run-sequence": "~1.1.5",
    "traceur": "~0.0.95",
    "wallaby-ng-html2js-preprocessor": "^0.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "f425529e10094bdb94bfa56a331a9b94a2e512f1",
    "tarball": "https://registry.npmjs.org/md-data-table/-/md-data-table-2.2.0.tgz"
  },
  "gitHead": "85f0902f81912208514d5d9b334e90a7cec510fc",
  "homepage": "https://github.com/iamisti/mdDataTable#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "iamisti",
      "email": "programtervezo@gmail.com"
    }
  ],
  "name": "md-data-table",
  "optionalDependencies": {},
  "readme": "> Live demo http://iamisti.github.io/mdDataTable/\r\n\r\nAngular material table. Complete implementation of google material design based on angular material components.\r\nThis component is optimized for speed, and it's faster then other similar implementations, since it generates a native html table, and browsers are optimized for tables.\r\n\r\n\r\n> Angular2 and Angular2 Material version of this plugin is under development. \r\nIf you want to be notified for the first release, please star the project here: [`md-data-table2`](https://github.com/iamisti/mdDataTable2)\r\n\r\n## Usage statistics\r\n\r\n[![NPM](https://nodei.co/npm-dl/md-data-table.png?months=6&height=3)](https://nodei.co/npm/md-data-table/)\r\n[![NPM](https://nodei.co/npm/md-data-table.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/md-data-table/)\r\n\r\n[![Build Status](https://travis-ci.org/iamisti/mdDataTable.svg?branch=master)](https://travis-ci.org/iamisti/mdDataTable) \r\n[![Code Climate](https://codeclimate.com/github/iamisti/mdDataTable/badges/gpa.svg)](https://codeclimate.com/github/iamisti/mdDataTable)\r\n[![Test Coverage](https://codeclimate.com/github/iamisti/mdDataTable/badges/coverage.svg?branch=master)](https://codeclimate.com/github/iamisti/mdDataTable/coverage) \r\n[![Dependency Status](https://gemnasium.com/iamisti/mdDataTable.svg)](https://gemnasium.com/iamisti/mdDataTable)\r\n[![Codacy Badge](https://api.codacy.com/project/badge/grade/fdcfe195e886430aaefefa54c972d3f7)](https://www.codacy.com/app/programtervezo/mdDataTable)\r\n\r\n## Install\r\n\r\n1. `bower install md-data-table` or `npm install md-data-table` or [download the source](https://github.com/iamisti/mdDataTable/archive/master.zip).\r\n2. Make sure the `mdDataTable` (notice the camelCase typing) lib is loaded. It's served in three different files: `md-data-table-style.css`, `md-data-table.js`, `md-data-table-templates.js`\r\n3. Add `mdDataTable` as a dependency of your app.\r\n\r\n## Load it from CDN (with example of version 1.8.0)\r\nhttps://cdnjs.cloudflare.com/ajax/libs/md-data-table/1.8.0/md-data-table-templates.min.js\r\n\r\nhttps://cdnjs.cloudflare.com/ajax/libs/md-data-table/1.8.0/md-data-table.min.js\r\n\r\nhttps://cdnjs.cloudflare.com/ajax/libs/md-data-table/1.8.0/md-data-table-style.css\r\n\r\n## UI&UX driven by google data table\r\nhttp://www.google.com/design/spec/components/data-tables.html\r\n\r\n## Table of contents\r\n[Overview](#overview)\r\n\r\n[Table attributes](#table-attributes)\r\n - selectable-rows\r\n - virtual-repeat\r\n - delete-row-callback\r\n - selected-row-callback\r\n - animate-sort-icon\r\n - ripple-effect\r\n - ! title-overflow-handler\r\n - table-card \r\n - paginated-rows\r\n - alternate-headers\r\n - mdt-row\r\n - mdt-row-paginator\r\n - mdt-row-paginator-error-message\r\n - mdt-row-paginator-no-results-message\r\n - mdt-trigger-request\r\n - mdt-translations\r\n - mdt-loading-indicator\r\n\r\n[Column attributes (`mdt-column`)](#column-attributes)\r\n - align-rule\r\n - column-definition\r\n - column-filter\r\n - exclude-from-column-selector\r\n - hide-column-by-default\r\n\r\n[Row attributes (`mdt-row`)](#data-row-attributes)\r\n - table-row-id\r\n\r\n[Cell attributes (`mdt-cell`)](#data-cell-attributes)\r\n - ! inline-menu\r\n - editable-field\r\n - html-content\r\n \r\n[Custom cell content (`mdt-custom-cell`)](#custom-cell-content)\r\n - column-key\r\n\r\n\r\n## Overview\r\n> In its simplest form, a data table contains a top row of column names, and rows for data.\r\n\r\n![A selected table row](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhV25CdGNXYzA4cXM/components_datatables_structure_basictable.png)\r\n\r\n## Table attributes\r\n> Global attributes for the table\r\n\r\n| Available        | Params                                         | Type          | Details       |\r\n| ---------------- | ---------------------------------------------- | ------------- | ------------- |\r\n|:white_check_mark:| selectable-rows                                | Boolean       | optional, checkboxes accompany each row if need to select or manipulate data |\r\n|:white_check_mark:| virtual-repeat                                 | Boolean       | optional, when set, virtual scrolling will be applied to the table. You must set a fixed height to the `.md-virtual-repeat-container` class in order to make it work properly. Since virtual scrolling is working with fixed height. |\r\n|:white_check_mark:| delete-row-callback                            | Function      | optional, callback function when deleting rows. The callback will be called with the array of the deleted row ids. Don't forget to specify `table-row-id` for `mdt-row`. If you do, it will return the deleted rows data. |\r\n|:white_check_mark:| selected-row-callback                          | Function      | optional, callback function when selecting rows. The callback will be called with the array of the selected row ids. Don't forget to specify `table-row-id` for `mdt-row`. If you do, it will return the selected rows data. |\r\n![alt tag](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhcWNyQl9xYmRkQnc/components_datatables_interaction_selectedrow.png)\r\n\r\n| Available        | Params                                         | Type          | Details       |\r\n| ---------------- | ---------------------------------------------- | ------------- | ------------- |\r\n|:white_check_mark:| animate-sort-icon                              | Boolean       | optional, if enabled, sort icon will be animated on change |\r\n|:white_check_mark:| ripple-effect                                  | Boolean       | optional, if enabled, ripple effect will be applied on the column names when clicked |\r\n![Table with an ascending sorted column](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhMW1haUJDRWJKLUk/components_datatables_interaction_sortedcolumn.png)\r\n\r\n| Available        | Params                             | ChildParams                     | Type          | Details       |\r\n| ---------------- | ---------------------------------- | ------------------------------- | ------------- | ------------- |\r\n|:x:               | title-overflow-handler             |                                 | String        | optional, Sometimes, column names donâ€™t fit in a container in between columns. There are two options to handle this |\r\n|:x:               |                                    | _(default)_ truncateColumnNames | -             | Shorten the column name and display it in full on hover |\r\n|:x:               |                                    | useHorizontalScrollingOnTable   | -             | Display the full column name and enable horizontal scrolling in the table container |\r\n![Long column names truncated with an ellipse](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhMkVuNC1Zd3QyZ1k/components_datatables_interaction_longtitle1.png)\r\n![Hovering over a truncated column name](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhclI1SGllZkZQTkE/components_datatables_interaction_longtitle2.png)\r\n\r\n| Available        | Params                                     | ChildParams                     | Type          | Details       |\r\n| -----------------| ------------------------------------------ | ------------------------------- | ------------- | ------------- |\r\n|:white_check_mark:| table-card                                 |                                 | Object        | optional, tables can be embedded within a card, with table navigation and data manipulation tools available at the top and bottom. |\r\n|:white_check_mark:|                                            | title                           | String        | The title of the table card |\r\n|:x:               |                                            | actionIcons                     | Boolean       | Card action icons (header and footer) |\r\n|:white_check_mark:|                                            | visible                         | Boolean       | The visibility of the table card |\r\n|:white_check_mark:|                                            | columnSelector                  | Boolean       | enables the column selection for the table (you can disable certain columns from the list selection, using `exclude-from-column-selector`, see the related docs) |\r\n![Table card with header and footer](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhUTEwa21JUEtza0k/components_datatables_cards_tablecard.png)\r\n\r\n| Available        | Params                                     | ChildParams                     | Type          | Details|\r\n| -----------------| ------------------------------------------ | ------------------------------- | ------------- | ------ |\r\n|:white_check_mark:| paginated-rows                             |                                 | Object        | optional, if set, then basic pagination will applied to the bottom of the table. |\r\n|:white_check_mark:|                                            | isEnabled                       | Boolean       | Optional, if provided then basic pagination will applied to the bottom of the table |\r\n|:white_check_mark:|                                            | rowsPerPageValues               | Array         | Optional, if provided then it will apply the rows per page values from the given arguments. Example: [5,10,20] |\r\n![Table card with header and footer](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhUTEwa21JUEtza0k/components_datatables_cards_tablecard.png)\r\n\r\n\r\n| Available        | Params                             | ChildParams                     | Type          | Details       |\r\n| ---------------- |----------------------------------- | ------------------------------- | ------------- | ------------- |\r\n|:white_check_mark:| alternate-headers                  |                                 | String        | optional, some table cards may require headers with actions instead of titles. Two possible approaches to this are to display persistent actions, or a contextual header that activates when items are selected |\r\n|:x:               |                                    | persistentActions               | -             | Shows persistent action buttons in header |\r\n|:white_check_mark:|                                    | contextual                      | -             | Shows contextual content depending on what has been selected |\r\n![persistent and contextual headers](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhemNvbnZOcXNpODQ/components_datatables_cards_altheaders.png)\r\n\r\n| Available        | Params                             | ChildParams                     | Type          | Details       |\r\n| ---------------- |----------------------------------- | ------------------------------- | ------------- | ------------- |\r\n|:white_check_mark:| mdt-row                            |                                 | Object        | optional, makes possible to provide row data by passing the information through this attribute. Makes it possible to listen on data changes. |\r\n|:white_check_mark:|                                    | data                            | Array         | required, The input data |\r\n|:white_check_mark:|                                    | table-row-id-key                | String|Integer| optional (same as `table-row-id`), defines the id of the row. Useful if you specified the callback function (`delete-row-callback`) for deleting a row. |\r\n|:white_check_mark:|                                    | table-row-class-name            | Function      | optional, callback that defines the classname of a row. |\r\n|:white_check_mark:|                                    | column-keys                     | Array         | required, property names of the passed data array. Makes it possible to configure which property should go in which column. |\r\n|:white_check_mark:| mdt-translations                   |                                 | Object        | optional, makes it possible to provide a custom translated texts in the table. |\r\n|:white_check_mark:|                                    | rowsPerPage                     | String        | When you need to select the amount of rows visible on the page, this label appears next to the dropdown |\r\n|:white_check_mark:|                                    | largeEditDialog.saveButtonLabel | String        | When edit mode is on, in the modal you can click on a button which has the 'Save' label. |\r\n|:white_check_mark:|                                    | largeEditDialog.cancelButtonLabel| String       | When edit mode is on, in the modal you can click on a button which has the : 'Cancel' label. |\r\n|:white_check_mark:| mdt-loading-indicator              |                                 | Object        | optional, if set then loading indicator can be customised. |\r\n|:white_check_mark:|                                    | color                           | String        | Passing a css compatible format as a color will set the color for the loading indicator (e.g.: 'red' or '#008bd2', '#000') |\r\nHtml support is available for `mdt-row`, see more: [Custom cell content (`mdt-custom-cell`)](#custom-cell-content)\r\n\r\n## Example usage for `mdt-row` attribute:\r\n```html\r\n<mdt-table\r\n    selectable-rows=\"true\"\r\n    table-card=\"{title: Nutrition, actionIcons: true}\"\r\n    mdt-row=\"{\r\n        'data': filteredItems,\r\n        'table-row-id-key': 'id',\r\n        'column-keys': ['name', 'calories', 'fat', 'carbs', 'protein', 'sodium', 'calcium', 'iron']\r\n    }\">\r\n\r\n    <mdt-header-row>\r\n        <mdt-column>Dessert (100g serving)</mdt-column>\r\n        <mdt-column>Type</mdt-column>\r\n        <mdt-column>Calories</mdt-column>\r\n        <mdt-column sortable-rows-default>Fat (g)</mdt-column>\r\n        <mdt-column>Carbs (g)</mdt-column>\r\n        <mdt-column>Protein (g)</mdt-column>\r\n    </mdt-header-row>\r\n\r\n    <!-- notice we didn't provide mdt-row here -->\r\n</mdt-table>\r\n```\r\n\r\n| Available        | Params                              | Type          | Details       |\r\n| ---------------- |------------------------------------ | ------------- | ------------- |\r\n|:white_check_mark:| mdt-row-paginator                   | Function      | optional, makes possible to provide a callback function which returns a promise, providing the data for the table. Has two parameters: `page` and `pageSize` (an optional parameter is `options` as a third parameter, which can have `columnFilter` property when `column-filter` is used or `columnSort` when you turn on column sorting feature |\r\n|:white_check_mark:| mdt-row-paginator-error-message     | String        | optional, overrides default error mesasge when promise gets rejected by the paginator function. |\r\n|:white_check_mark:| mdt-row-paginator-no-results-message| String        | optional, overrides default 'no results' message when there are no results in the table. |\r\n|:white_check_mark:| mdt-trigger-request                 | function(loadPageCallback) | optional, if `mdt-row-paginator` set, provides a callback function for manually triggering an ajax request. Can be useful when you want to populate the results in the table manually. (e.g.: having a search field in your page which then can trigger a new request in the table to show the results based on that filter.  |\r\n\r\n## Example usage for `mdt-row-paginator` attribute:\r\n```html\r\n<mdt-table\r\n    paginated-rows=\"{isEnabled: true, rowsPerPageValues: [5,10,20,100]}\"\r\n    mdt-row-paginator=\"paginatorCallback(page, pageSize, options)\"\r\n    mdt-row-paginator-error-message=\"Error happened during loading nutritions.\"\r\n    mdt-row=\"{\r\n        'table-row-id-key': 'fields.item_id',\r\n        'column-keys': [\r\n            'fields.item_name',\r\n            'fields.nf_calories',\r\n            'fields.nf_total_fat',\r\n            'fields.nf_total_carbohydrate',\r\n            'fields.nf_protein',\r\n            'fields.nf_sodium',\r\n            'fields.nf_calcium_dv',\r\n            'fields.nf_iron_dv'\r\n        ],\r\n    }\">\r\n\r\n    <mdt-header-row>\r\n        <mdt-column align-rule=\"left\">Dessert (100g serving)</mdt-column>\r\n        <mdt-column align-rule=\"right\">Calories</mdt-column>\r\n        <mdt-column align-rule=\"right\">Fat (g)</mdt-column>\r\n        <mdt-column align-rule=\"right\">Carbs (g)</mdt-column>\r\n        <mdt-column align-rule=\"right\">Protein (g)</mdt-column>\r\n        <mdt-column align-rule=\"right\">Sodium (mg)</mdt-column>\r\n        <mdt-column align-rule=\"right\">Calcium (%)</mdt-column>\r\n        <mdt-column align-rule=\"right\">Iron (%)</mdt-column>\r\n    </mdt-header-row>\r\n</mdt-table>\r\n```\r\n\r\n\r\n## Column attributes\r\n>`mdt-column` attributes\r\n\r\n| Available        | Params                                         | ChildPArams         | Type         | Details         |\r\n| ---------------- | ---------------------------------------------- | --------------------|------------- | --------------- |\r\n|:white_check_mark:| align-rule                                     |                     |String        | if provided, align the text to the needed direction for the entire column (note, that it aligns the data that belongs to the column) |\r\n|:white_check_mark:|                                                | _(default)_ left    |              | left-align content \r\n|:white_check_mark:|                                                | right               |              | right-align content \r\n\r\n\r\n| Available        | Params                                         | Type          | Details         |\r\n| ---------------- | ---------------------------------------------- | ------------- | --------------- |\r\n|:white_check_mark:| column-definition                              | String        | if provided, display a tooltip on hover. If sorting is enabled, display a light sort icon upon hover, which indicates that the column is sortable. |\r\n![Column definition on hover](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhenh5SWhFdFlyajg/components_datatables_interaction_tooltip.png)\r\n\r\n| Available        | Params                                         | ChildPArams    | Type           | Details         |\r\n| -----------------| ---------------------------------------------- | -------------- | -------------- | --------------- |\r\n|:x:               | sortable-rows-default                          | -              |                | When column-sort is applied to the table, it marks the column as the default sorting column |\r\n|:white_check_mark:| column-sort                                    |                | Boolean|Object | if provided, sort data and display a sorted state in the header. Clicking on a column which is already sorted will reverse the sort order and rotate the sort icon. |\r\n|:white_check_mark:| column-sort                                    | true|false     |                | in case of boolean, true value enables the feature, false disables it (default is disabled) |\r\n|:white_check_mark:| column-sort                                    | comparator     |                | in case of object, specifying a 'comparator' property which is a function for sorting the column data's. As every compare function, it gets two parameters and return with the compared result (-1,1,0) |\r\n\r\n| Available        | Params                                         | ChildPArams              | Type         | Details         |\r\n| ---------------- | ---------------------------------------------- | -------------------------|------------- | --------------- |\r\n|:white_check_mark:| column-filter                                  |                          | Object       | if provided, user can activate column filter feature on the selected column. |\r\n|:white_check_mark:|                                                | valuesProviderCallback   | Function     | required, function which provides the values into the column filter. It must return with a promise which resolves an array of strings/objects.| \r\n|:white_check_mark:|                                                | valuesTransformerCallback| Function     | optional, function which transforms the provided objects into strings to be able to show it visually in the column filter.|\r\n|:white_check_mark:|                                                | placeholderText          | Text         | optional, placeholder which will show up as a default text (available only for `chips` and `dropdown` filter types |\r\n|:white_check_mark:|                                                | filterType               | Text         | optional, defines the type of the filter you want to use. Available options are: `chips`, `checkbox`, `dropdown`. If you don't specify it, the default will be `chips` |\r\n|:white_check_mark:| exclude-from-column-selector                   |                          | Boolean      | optional, excludes the column from the column selection feature |\r\n|:white_check_mark:| hide-column-by-default                         |                          | Boolean      | optional, make column unselected by default in the column selection panel |\r\n\r\n> When filters are applied to the columns, a third parameter will be applied to the `mdt-row-paginator` callback function.\r\n\r\n# Data-Row attributes \r\n> `mdt-row` attributes\r\n\r\n| Available        | Params                                         | Type          | Details         |\r\n| ---------------- | ---------------------------------------------- | ------------- | --------------- |\r\n|:white_check_mark:| table-row-id                                   | String|Integer| defines the id of the row. Useful if you specified the callback function (`delete-row-callback`) for deleting a row. |\r\n\r\n## Custom cell content\r\n>`mdt-custom-cell` attributes\r\n\r\nIf you are using `mdt-row` attribute to load your data (which is only way of you are dealing with ajax contents), you can now have custom content for each cells you defined.\r\nImportant information:\r\n> You can still access your scope variables/functions with accessing `clientScope` within the `mdt-custom-cell` directive. The value of the cell can be accessed by accessing `value` inside the directive.\r\n> Accessing `rowId` also possible if you specified it with `table-row-id-key`.\r\n\r\n| Available        | Params                                         | ChildParams        | Type          | Details         |\r\n| ---------------- | ---------------------------------------------- | ------------------ | ------------- | --------------- |\r\n|:white_check_mark:               | column-key                                     |                    | String        | required, specifies the column in the rows. |\r\nThere is only one scope variable that you can use in your template, and it's called `value`. Check the example.\r\n\r\n## Example usage for `mdt-custom-cell`:\r\n```html\r\n<mdt-table>\r\n    <mdt-table mdt-row=\"{'data': filteredItems,\r\n                      'table-row-id-key': 'id',\r\n                      'column-keys': ['name', 'calories', 'fat', 'carbs', 'protein', 'sodium', 'calcium', 'iron']}\">\r\n        <mdt-header-row>\r\n            <mdt-column align-rule=\"left\">Dessert (100g serving)</mdt-column>\r\n            <mdt-column align-rule=\"right\">Calories</mdt-column>\r\n            <mdt-column align-rule=\"right\">Fat (g)</mdt-column>\r\n            <mdt-column align-rule=\"right\">Carbs (g)</mdt-column>\r\n            <mdt-column align-rule=\"right\">Protein (g)</mdt-column>\r\n            <mdt-column align-rule=\"right\">Sodium (mg)</mdt-column>\r\n            <mdt-column align-rule=\"right\">Calcium (%)</mdt-column>\r\n            <mdt-column align-rule=\"right\">Iron (%)</mdt-column>\r\n        </mdt-header-row>\r\n\r\n        <!-- here you have your own, customised cell for every 'protein' column -->\r\n        <mdt-custom-cell column-key=\"protein\">\r\n            <span ng-class=\"{'red': value > 5, 'green': value <= 5}\">{{value}}</span>\r\n            <span ng-click=\"clientScope.myMethodToExecute()\">click here</span>\r\n            \r\n            <span>This is the row id for this column: {{rowId}}</span>\r\n        </mdt-custom-cell>\r\n    </mdt-table>\r\n</mdt-table>\r\n```\r\n\r\n\r\n# Data-Cell attributes \r\n>`mdt-cell` attributes\r\n\r\n| Available        | Params                                         | ChildParams        | Type          | Details         |\r\n| ---------------- | ---------------------------------------------- | ------------------ | ------------- | --------------- |\r\n|:x:               | inline-menu                                    |                    | Array         | if provided, users can select from a predefined list of options. In this scenario, a menu component directly embedded in the table |\r\n![A table with inline menus](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhblJlanhBSHYzNWs/components_datatables_interaction_inlinemenus1.png)\r\n![An expanded inline menu](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhV200T3NSWG9TZFU/components_datatables_interaction_inlinemenus2.png)\r\n\r\n| Available               | Params                                         | ChildParams        | Type          | Details         |\r\n| ----------------------- | ---------------------------------------------- | ------------------ | ------------- | --------------- |\r\n|:white_check_mark:                      | editable-field                                 |                    | String        | if provided, provides basic text editing. Include editable fields within a table and denote them using placeholder text(if empty). You can use a simple edit dialog with just a text field, or display a full dialog component on click. |\r\n|:white_check_mark:                      |                                                | smallEditDialog    | -             | A simple, one-field edit dialog on click |\r\n|:white_check_mark:                      |                                                | largeEditDialog    | -             | A complex, flexible edit edit dialog on click |\r\n|:white_check_mark:                      | editable-field-title                           |                    | String        | If set, then it sets the title of the dialog. (only for `largeEditDialog`) |\r\n|:white_check_mark:                      | editable-field-max-length                      |                    | Number        | if set, then it sets the maximum length of the field. |\r\n![An editable table cell with placeholder text](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhZTViOVFXZTNucGs/components_datatables_interaction_editing1.png)\r\n![A simple, one-field edit dialog](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhZHhJSVhoT2JuTkE/components_datatables_interaction_editing2.png)\r\n![A complex, flexible edit dialog](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhZkY4b1VkME5QcXM/components_datatables_interaction_editing3.png)\r\n![Icon-based edit affordance](http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B3mOPoJlxiFhazJZa2VmSU5ldTQ/components_datatables_interaction_editing4.png)\r\n\r\n| Available        | Params                                         | ChildParams        | Type          | Details         |\r\n| ---------------- | ---------------------------------------------- | ------------------ | ------------- | --------------- |\r\n|:white_check_mark:| html-content                                   |                    | Boolean       | When the cell content is not a simple value (html content) |\r\n\r\n\r\n## Example usage:\r\n```html\r\n<mdt-table\r\n    selectable-rows=\"true\"\r\n    table-card=\"{title: Nutrition, actionIcons: true}\">\r\n\r\n    <mdt-header-row>\r\n        <!-- defining column descriptions, align content to the left -->\r\n        <mdt-column\r\n            align-rule=\"left\"\r\n            column-definition=\"The total amount of food energy in the given serving size.\">\r\n            Dessert (100g serving)\r\n        </mdt-column>\r\n\r\n        <!-- in case of inline menu (INLINE-MENU FEATURE DOES NOT EXIST YET) -->\r\n        <mdt-column inline-menu=\"[ {iceCream: 'Ice Cream', pastry: 'Pastry', other: 'Other'} ]\">Type</mdt-column>\r\n\r\n        <!-- inline text editing (EDITABLE-FIELDS FEATURE DOES NOT EXIST YET) -->\r\n        <mdt-column editable-field=\"textInput\">\r\n            Calories\r\n        </mdt-column>\r\n\r\n        <!-- in case of sortable columns, we can set the defaultly sortable column -->\r\n        <mdt-column sortable-rows-default>\r\n            Fat (g)\r\n        </mdt-column>\r\n        <mdt-column>Carbs (g)</mdt-column>\r\n        <mdt-column>Protein (g)</mdt-column>\r\n    </mdt-header-row>\r\n\r\n    <mdt-row ng-repeat=\"nutrition in nutritionList\">\r\n        <mdt-cell>Frozen Joghurt</mdt-cell>\r\n        <mdt-cell>159</mdt-cell>\r\n        <mdt-cell>6</mdt-cell>\r\n        <mdt-cell>24</mdt-cell>\r\n        <mdt-cell>4</mdt-cell>\r\n        <mdt-cell>87</mdt-cell>\r\n    </mdt-row>\r\n\r\n</mdt-table>\r\n```\r\n",
  "readmeFilename": "README.md",
  "registry": "github",
  "repository": {
    "type": "git",
    "url": "git://github.com/iamisti/mdDataTable.git"
  },
  "scripts": {},
  "version": "2.2.0"
}
