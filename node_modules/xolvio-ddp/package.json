{
  "_args": [
    [
      {
        "raw": "xolvio-ddp@^0.12.0",
        "scope": null,
        "escapedName": "xolvio-ddp",
        "name": "xolvio-ddp",
        "rawSpec": "^0.12.0",
        "spec": ">=0.12.0 <0.13.0",
        "type": "range"
      },
      "C:\\interview\\tontineApp\\node_modules\\chimp"
    ]
  ],
  "_from": "xolvio-ddp@>=0.12.0 <0.13.0",
  "_id": "xolvio-ddp@0.12.3",
  "_inCache": true,
  "_location": "/xolvio-ddp",
  "_nodeVersion": "4.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/xolvio-ddp-0.12.3.tgz_1475661857548_0.21592008834704757"
  },
  "_npmUser": {
    "name": "lgandecki",
    "email": "lgandecki@thebrain.pro"
  },
  "_npmVersion": "2.14.20",
  "_phantomChildren": {
    "boom": "2.10.1",
    "core-util-is": "1.0.2",
    "cryptiles": "2.0.5",
    "ctype": "0.5.3",
    "hoek": "2.16.3",
    "inherits": "2.0.3",
    "isstream": "0.1.2",
    "json-stringify-safe": "5.0.1",
    "sntp": "1.0.9",
    "stringstream": "0.0.5",
    "tough-cookie": "2.3.2"
  },
  "_requested": {
    "raw": "xolvio-ddp@^0.12.0",
    "scope": null,
    "escapedName": "xolvio-ddp",
    "name": "xolvio-ddp",
    "rawSpec": "^0.12.0",
    "spec": ">=0.12.0 <0.13.0",
    "type": "range"
  },
  "_requiredBy": [
    "/chimp"
  ],
  "_resolved": "https://registry.npmjs.org/xolvio-ddp/-/xolvio-ddp-0.12.3.tgz",
  "_shasum": "36a6ab9612b240b5a0d1c0a834908af17c0b8f02",
  "_shrinkwrap": null,
  "_spec": "xolvio-ddp@^0.12.0",
  "_where": "C:\\interview\\tontineApp\\node_modules\\chimp",
  "author": {
    "name": "Tom Coleman",
    "email": "tom@thesnail.org",
    "url": "http://tom.thesnail.org"
  },
  "bugs": {
    "url": "https://github.com/xolvio/node-ddp-client/issues"
  },
  "contributors": [
    {
      "name": "Thomas Sarlandie",
      "email": "thomas@sarlandie.net",
      "url": "http://www.sarfata.org"
    },
    {
      "name": "Mason Gravitt",
      "email": "emgee@gravitronic.com"
    },
    {
      "name": "Mike Bannister",
      "email": "notimpossiblemike@gmail.com",
      "url": "http://po.ssibiliti.es"
    },
    {
      "name": "Chris Mather",
      "email": "mather.chris@gmail.com",
      "url": "http://eventedmind.com"
    },
    {
      "name": "Tarang Patel"
    },
    {
      "name": "Vaughn Iverson",
      "email": "vsivsi@yahoo.com"
    },
    {
      "name": "Rony Kubat",
      "email": "rony@kubat.org"
    }
  ],
  "dependencies": {
    "bluebird": "^2.9.24",
    "ddp-ejson": "0.8.1-3",
    "ddp-underscore-patched": "0.8.1-2",
    "faye-websocket": "~0.9.4",
    "request": "2.53.x"
  },
  "description": "Node.js module to connect to servers using DDP protocol.",
  "devDependencies": {
    "mocha": "~2.2.1",
    "rewire": "~2.3.1",
    "sinon": "~1.14.1"
  },
  "directories": {},
  "dist": {
    "shasum": "36a6ab9612b240b5a0d1c0a834908af17c0b8f02",
    "tarball": "https://registry.npmjs.org/xolvio-ddp/-/xolvio-ddp-0.12.3.tgz"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "6068cfa0fe2acf0cc6956a11c04359ab2c3b0645",
  "homepage": "https://github.com/xolvio/node-ddp-client#readme",
  "keywords": [
    "ddp",
    "meteor",
    "protocol"
  ],
  "license": "MIT/X11",
  "main": "lib/ddp-client",
  "maintainers": [
    {
      "name": "lgandecki",
      "email": "lgandecki@thebrain.pro"
    },
    {
      "name": "xolvio",
      "email": "admin@xolvio.com"
    }
  ],
  "name": "xolvio-ddp",
  "optionalDependencies": {},
  "readme": "Node DDP Client\n===============\n\nA callback style [DDP](https://github.com/meteor/meteor/blob/devel/packages/livedata/DDP.md) ([Meteor](http://meteor.com/)'s Distributed Data Protocol) node client, originally based alansikora's [node-js_ddp-client](https://github.com/alansikora/node-js_ddp-client) and Meteor's python client. Uses a more callback style approach.\n\nThe client implements version 1 of DDP, as well as fallbacks to pre1 and pre2.\n\nInstallation\n============\n\n```\n  npm install ddp\n```\n\nAuthentication\n==============\nBuilt-in authentication support was removed in ddp 0.7.0 due to changes in Meteor version 0.8.2.\n\nOne can authenticate using plain-text logins as follows:\n\n```js\n// logging in with e-mail\nddpclient.call(\"login\", [\n  { user : { email : \"user@domain.com\" }, password : \"password\" }\n], function (err, result) { ... });\n\n// logging in with username\nddpclient.call(\"login\", [\n  { user : { username : \"username\" }, password : \"password\" }\n], function (err, result) { ... });\n```\n\nYou can also use [vsivsi/ddp-login](https://github.com/vsivsi/ddp-login).\n\n\nExample\n=======\n\nPlease see the example in `examples/example.js`. Or here for reference:\n\n```js\nvar DDPClient = require(\"ddp\");\n\nvar ddpclient = new DDPClient({\n  // All properties optional, defaults shown\n  host : \"localhost\",\n  port : 3000,\n  ssl  : false,\n  autoReconnect : true,\n  autoReconnectTimer : 500,\n  maintainCollections : true,\n  ddpVersion : '1',  // ['1', 'pre2', 'pre1'] available\n  // uses the SockJs protocol to create the connection\n  // this still uses websockets, but allows to get the benefits\n  // from projects like meteorhacks:cluster\n  // (for load balancing and service discovery)\n  // do not use `path` option when you are using useSockJs\n  useSockJs: true,\n  // Use a full url instead of a set of `host`, `port` and `ssl`\n  // do not set `useSockJs` option if `url` is used\n  url: 'wss://example.com/websocket'\n});\n\n/*\n * Connect to the Meteor Server\n */\nddpclient.connect(function(error, wasReconnect) {\n  // If autoReconnect is true, this callback will be invoked each time\n  // a server connection is re-established\n  if (error) {\n    console.log('DDP connection error!');\n    return;\n  }\n\n  if (wasReconnect) {\n    console.log('Reestablishment of a connection.');\n  }\n\n  console.log('connected!');\n\n  setTimeout(function () {\n    /*\n     * Call a Meteor Method\n     */\n    ddpclient.call(\n      'deletePosts',             // name of Meteor Method being called\n      ['foo', 'bar'],            // parameters to send to Meteor Method\n      function (err, result) {   // callback which returns the method call results\n        console.log('called function, result: ' + result);\n      },\n      function () {              // callback which fires when server has finished\n        console.log('updated');  // sending any updated documents as a result of\n        console.log(ddpclient.collections.posts);  // calling this method\n      }\n    );\n  }, 3000);\n\n  /*\n   * Call a Meteor Method while passing in a random seed.\n   * Added in DDP pre2, the random seed will be used on the server to generate\n   * repeatable IDs. This allows the same id to be generated on the client and server\n   */\n  var Random = require(\"ddp-random\"),\n      random = Random.createWithSeeds(\"randomSeed\");  // seed an id generator\n\n  ddpclient.callWithRandomSeed(\n    'createPost',              // name of Meteor Method being called\n    [{ _id : random.id(),      // generate the id on the client\n      body : \"asdf\" }],\n    \"randomSeed\",              // pass the same seed to the server\n    function (err, result) {   // callback which returns the method call results\n      console.log('called function, result: ' + result);\n    },\n    function () {              // callback which fires when server has finished\n      console.log('updated');  // sending any updated documents as a result of\n      console.log(ddpclient.collections.posts);  // calling this method\n    }\n  );\n\n  /*\n   * Subscribe to a Meteor Collection\n   */\n  ddpclient.subscribe(\n    'posts',                  // name of Meteor Publish function to subscribe to\n    [],                       // any parameters used by the Publish function\n    function () {             // callback when the subscription is complete\n      console.log('posts complete:');\n      console.log(ddpclient.collections.posts);\n    }\n  );\n\n  /*\n   * Observe a collection.\n   */\n  var observer = ddpclient.observe(\"posts\");\n  observer.added = function(id) {\n    console.log(\"[ADDED] to \" + observer.name + \":  \" + id);\n  };\n  observer.changed = function(id, oldFields, clearedFields, newFields) {\n    console.log(\"[CHANGED] in \" + observer.name + \":  \" + id);\n    console.log(\"[CHANGED] old field values: \", oldFields);\n    console.log(\"[CHANGED] cleared fields: \", clearedFields);\n    console.log(\"[CHANGED] new fields: \", newFields);\n  };\n  observer.removed = function(id, oldValue) {\n    console.log(\"[REMOVED] in \" + observer.name + \":  \" + id);\n    console.log(\"[REMOVED] previous value: \", oldValue);\n  };\n  setTimeout(function() { observer.stop() }, 6000);\n});\n\n/*\n * Useful for debugging and learning the ddp protocol\n */\nddpclient.on('message', function (msg) {\n  console.log(\"ddp message: \" + msg);\n});\n\n/*\n * Close the ddp connection. This will close the socket, removing it\n * from the event-loop, allowing your application to terminate gracefully\n */\nddpclient.close();\n\n/*\n * If you need to do something specific on close or errors.\n * You can also disable autoReconnect and\n * call ddpclient.connect() when you are ready to re-connect.\n*/\nddpclient.on('socket-close', function(code, message) {\n  console.log(\"Close: %s %s\", code, message);\n});\n\nddpclient.on('socket-error', function(error) {\n  console.log(\"Error: %j\", error);\n});\n\n/*\n * You can access the EJSON object used by ddp.\n */\nvar oid = new ddpclient.EJSON.ObjectID();\n```\n\nSockJS Mode\n===============\n\nBy using the `useSockJs` option like below, DDP connection will use [SockJs](https://github.com/sockjs) protocol to establish the WebSocket connection.\n\n```js\nvar ddpClient = new DDPClient({ useSockJs: true });\n```\n\nMeteor server uses SockJs to implement it's DDP server. With this mode, we can get the benefits provided by [meteorhacks:cluster](https://github.com/meteorhacks/cluster). Some of those are load balancing and service discovery.\n\n* For load balancing you don't need to anything.\n* For service discovery, just use the `path` option to identify the service you are referring to.\n\n> With this mode, `path` option has a special meaning. So, thing twice before using `path` option when you are using this option.\n\nUnimplemented Features\n====\nThe node DDP client does not implement ordered collections, something that while in the DDP spec has not been implemented in Meteor yet.\n\nThanks\n======\n\nMany thanks to Alan Sikora for the ddp-client which formed the inspiration for this code.\n\nContributions:\n * Tom Coleman (@tmeasday)\n * Thomas Sarlandie (@sarfata)\n * Mason Gravitt (@emgee3)\n * Mike Bannister (@possiblities)\n * Chris Mather (@eventedmind)\n * James Gill (@jagill)\n * Vaughn Iverson (@vsivsi)\n",
  "readmeFilename": "README.markdown",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/xolvio/node-ddp-client.git"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha test"
  },
  "version": "0.12.3"
}
